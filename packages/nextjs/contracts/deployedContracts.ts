/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {
  31337: {
    PredictionMarketChallenge: {
      address: "0x107d6f280a05f07b59039143ca21e3f917aafa30",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "_oracle",
              type: "address",
              internalType: "address",
            },
            {
              name: "_question",
              type: "string",
              internalType: "string",
            },
            {
              name: "_option1",
              type: "string",
              internalType: "string",
            },
            {
              name: "_option2",
              type: "string",
              internalType: "string",
            },
            {
              name: "_initialTokenAmount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "payable",
        },
        {
          type: "function",
          name: "buyTokenWithETH",
          inputs: [
            {
              name: "_optionId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "_amountTokenToBuy",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "payable",
        },
        {
          type: "function",
          name: "oracle",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "owner",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "prediction",
          inputs: [],
          outputs: [
            {
              name: "question",
              type: "string",
              internalType: "string",
            },
            {
              name: "option1",
              type: "string",
              internalType: "string",
            },
            {
              name: "option2",
              type: "string",
              internalType: "string",
            },
            {
              name: "optionToken1",
              type: "address",
              internalType: "contract PredictionMarketToken",
            },
            {
              name: "optionToken2",
              type: "address",
              internalType: "contract PredictionMarketToken",
            },
            {
              name: "tokenReserve1",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "tokenReserve2",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "winningOptionId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "isReported",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "tokenRatio",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "initialTokenAmount",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "initialLiquidity",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "ethReserve",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "lpReserve",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "redeemWinningTokens",
          inputs: [
            {
              name: "_amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "report",
          inputs: [
            {
              name: "_winningOption",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "sellTokensForEth",
          inputs: [
            {
              name: "_optionId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "_tokenAmountToSell",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "sellTotalPriceInEth",
          inputs: [
            {
              name: "_tokenNumber",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "_tradingAmount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "totalPriceInEth",
          inputs: [
            {
              name: "_tokenNumber",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "_tradingAmount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "error",
          name: "PredictionMarket__InsufficientWinningTokens",
          inputs: [],
        },
        {
          type: "error",
          name: "PredictionMarket__InvalidOption",
          inputs: [],
        },
        {
          type: "error",
          name: "PredictionMarket__MustProvideETHForInitialLiquidity",
          inputs: [],
        },
        {
          type: "error",
          name: "PredictionMarket__OnlyOracleCanReport",
          inputs: [],
        },
        {
          type: "error",
          name: "PredictionMarket__PredictionAlreadyResolved",
          inputs: [],
        },
        {
          type: "error",
          name: "PredictionMarket__PredictionNotResolved",
          inputs: [],
        },
      ],
      inheritedFunctions: {},
      deploymentFile: "run-1740042611.json",
      deploymentScript: "Deploy.s.sol",
    },
  },
} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
